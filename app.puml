@startuml
'https://plantuml.com/class-diagram

namespace Database {
    namespace Model {
        class Book {
            - int id
            - string title
            - string author
            - string isbn
            - enum status
            + borrow(): void
            + returnBook(): void
        }

        class User {
            - int id
            - enum role
            - string password
            - string email
            - string username
        }

        class Borrow {
            - int id
            - Book book
            - User user
            - DateTimeImmutable borrowedAt
            - ?DateTimeImmutable returnedAt
        }
    }

    namespace Connection {
        class Connection {
            # PDO pdo
            # {static} static _instance
            + prepare(): Statement
            + execute(): void
            + {static} get(): static
        }
    }

    namespace Repository {
        abstract class Repository {
            # Connection connection
            # string modelName
            + __construct()
            + add(object model): bool
            + remove(object model): bool
            + update(object model): bool
            + get(int id): object
            + list(): iterable
            + {abstract} getModelName(): string
        }

        class BookRepository extends Repository {
            + getModelName(): string
        }
        class UserRepository extends Repository {
            + getModelName(): string
        }
        class BorrowRepository extends Repository {
            + getModelName(): string
        }
    }
    namespace Manager {
        class BookManager {
            # BorrowRepository borrowRepository
            # BookRepository bookRepository
            + borrowBook(Book book, User user): bool
            + returnBook(Book book, User user): bool
            + getList(): iterable
        }
    }
}

namespace Event {
    namespace Dispatcher {
        interface EventDispatcherInterface {
            + dispatch(object event): object
        }

        class EventDispatcher implements EventDispatcherInterface {
            # callable[] listeners
            + registerListener(string event, callable listener): bool
            + dispatch(object event): object
        }
    }
}

namespace Notification {
    interface NotificationServiceInterface {
        + notify(string message): bool
    }

    class Notifier implements NotificationServiceInterface {
        # NotificationService[] notifiers
        + notify(string message): bool
        + notifyBookStatusChange(Borrow borrow): bool
    }

    namespace Notifiers {
        class EmailNotificationService implements NotificationService {
            + notify(string message): bool
        }
    }
}

namespace Controller {
    class BookController {
        # BookManager manager
        + index(): void
        + borrow(): void
        + returnBook(): void
    }
}

namespace Core {
    class Container implements ContainerInterface {
        + get(string id): mixed
        + has(string id): bool
    }

    class Router {
        + dispatch(string url): void
    }
}

Book <-- Borrow::book
User <-- Borrow::user
BookManager::bookRepository --> BookRepository
BookManager::borrowRepository --> BorrowRepository
Notifier::notifyBookStatusChange --> Borrow
BookController::manager --> BookManager

@enduml
